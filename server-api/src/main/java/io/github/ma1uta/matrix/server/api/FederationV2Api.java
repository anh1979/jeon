/*
 * Copyright Anatoliy Sablin tolya@sablin.xyz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.ma1uta.matrix.server.api;

import io.github.ma1uta.matrix.common.ErrorResponse;
import io.github.ma1uta.matrix.server.model.federation.EventContainer;
import io.github.ma1uta.matrix.server.model.federation.InviteV2Request;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

import javax.ws.rs.Consumes;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.container.AsyncResponse;
import javax.ws.rs.container.Suspended;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

/**
 * Matrix homeservers use the Federation APIs (also known as server-server APIs) to communicate with each other. Homeservers use
 * these APIs to push messages to each other in real-time, to request historic messages from each other, and to query profile and
 * presence information about users on each other's servers.
 * <br>
 * The APIs are implemented using HTTPS GETs and PUTs between each of the servers. These HTTPS requests are strongly authenticated
 * using public key signatures at the TLS transport layer and using public key signatures in HTTP Authorization headers at the HTTP layer.
 */
@Path("/_matrix/federation/v2")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface FederationV2Api {

    /**
     * Invites a remote user to a room. Once the event has been signed by both the inviting homeserver and the invited homeserver,
     * it can be sent to all of the servers in the room by the inviting homeserver.
     * <br>
     * This endpoint is preferred over the v1 API as it is more useful for servers. Senders which receive a 400 or 404 response to this
     * endpoint should retry using the v1 API as the server may be older, if the room version is "1" or "2".
     * <br>
     * Note that events have a different format depending on the room version - check the room version specification for precise
     * event formats. The request and response bodies here describe the common event fields in more detail and may be missing other
     * required fields for a PDU.
     * <br>
     * <b>Requires auth</b>: Yes.
     * <br>
     * Return: List of the {@link Integer} and {@link EventContainer}.
     * <p>Status code 200: The event with the invited server's signature added. All other fields of the events should remain untouched.
     * Note that events have a different format depending on the room version - check the room version specification for precise event
     * formats.</p>
     * <p>Status code 403: The invite is not allowed. This could be for a number of reasons, including:</p>
     * <ul>
     * <li>The sender is not allowed to send invites to the target user/homeserver.</li>
     * <li>The homeserver does not permit anyone to invite its users.</li>
     * <li>The homeserver refuses to participate in the room.</li>
     * </ul>
     *
     * @param roomId        Required. The room ID that the user is being invited to.
     * @param eventId       Required. The event ID for the invite event, generated by the inviting server.
     * @param request       Invite JSON request.
     * @param uriInfo       Request Information.
     * @param httpHeaders   Http headers.
     * @param asyncResponse Asynchronous response.
     */
    @Operation(
        summary = "Invites a remote user to a room.",
        description = "Once the event has been signed by both the inviting homeserver and the invited homeserver, it can be sent to all"
            + " of the servers in the room by the inviting homeserver. This endpoint is preferred over the v1 API as it is more useful"
            + " for servers. Senders which receive a 400 or 404 response to this endpoint should retry using the v1 API as the server"
            + " may be older, if the room version is \"1\" or \"2\"."
            + " Note that events have a different format depending on the room version-check the room version specification for precise"
            + " event formats.The request and response bodies here describe the common event fields in more detail and may be missing other"
            + " required fields for a PDU.",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "The event with the invited server's signature added. All other fields of the events should remain untouched."
                    + " Note that events have a different format depending on the room version - check the room version specification"
                    + " for precise event formats.",
                content = @Content(
                    array = @ArraySchema(
                        schema = @Schema(
                            anyOf = {
                                Integer.class,
                                EventContainer.class
                            }
                        )
                    )
                )
            ),
            @ApiResponse(
                responseCode = "403",
                description = "The invite is not allowed.",
                content = @Content(
                    schema = @Schema(
                        implementation = ErrorResponse.class
                    )
                )
            )
        }
    )
    @PUT
    @Path("/invite/{roomId}/{eventId}")
    void invite(
        @Parameter(
            name = "roomId",
            description = "The room ID that the user is being invited to.",
            required = true
        ) @PathParam("roomId") String roomId,
        @Parameter(
            name = "eventId",
            description = "The event ID for the invite event, generated by the inviting server.",
            required = true
        ) @PathParam("eventId") String eventId,
        @RequestBody InviteV2Request request,

        @Context UriInfo uriInfo,
        @Context HttpHeaders httpHeaders,
        @Suspended AsyncResponse asyncResponse
    );
}
